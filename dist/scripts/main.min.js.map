{"version":3,"sources":["parameters.config.js","app.module.js","CityFactory.js","ForecastFactory.js","WeatherTypeFactory.js","fDialog.js","ForecastController.js"],"names":["angular","module","constant","url","configFunction","$httpProvider","defaults","headers","common","btoa","config","$inject","cityFactory","$resource","ApiSettings","factory","forecastFactory","id","update","method","wTypeFactory","DialogController","this","close","console","log","forecast","undefined","component","controller","bindings","action","weatherTypes","cities","dates","template","$element","$timeout","dialog","find","showModal","dialogPolyfill","registerDialog","ForecastController","$scope","$filter","City","WeatherType","Forecast","copyObject","from","to","Object","keys","forEach","key","fillModalAction","type","callback","modalAction","findedDate","day","fcasts","el","parseInt","rebuildDates","city","filter","fcast","city_id","length","i","push","String","sortForecast","sort","a","b","date","date1","Date","parse","replace","date2","getDay","split","isLoading","selectedForecast","today","get","resp","d","results","res","code","name","entry","isNow","weather_type","setCity","deleteForecast","remove","splice","indexOf","openModal","setDate","e","preventDefault","newFCast","$save","value"],"mappings":"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","file":"main.min.js","sourcesContent":["(function () {\n  'use strict';\n\n  angular\n    .module('parameters.config', [])\n    .constant('ApiSettings', {\n        url: 'https://t441.databoom.space/api1/b441/collections/'\n    });\n})();\n","(function() {\n  'use strict';\n\n  angular.module(\n    'bDay',\n    [\n      'parameters.config',\n      'ngResource'\n    ]\n  );\n\n  angular\n    .module('bDay')\n    .config(configFunction);\n\n  configFunction.$inject = ['$httpProvider'];\n\n  function configFunction($httpProvider) {\n    $httpProvider.defaults.headers.common['Authorization'] = 'Basic ' + btoa('usr1:usr1');\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('bDay')\n    .factory('City', cityFactory);\n\n  cityFactory.$inject = ['$resource', 'ApiSettings'];\n\n  function cityFactory($resource, ApiSettings) {\n    return $resource(ApiSettings.url + 'cities');\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('bDay')\n    .factory('Forecast', forecastFactory);\n\n  forecastFactory.$inject = ['$resource', 'ApiSettings'];\n\n  function forecastFactory($resource, ApiSettings) {\n    return $resource(ApiSettings.url + 'forecast(:id)', {id: '@_id'}, {\n      update: {method: 'PUT'}\n    });\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('bDay')\n    .factory('WeatherType', wTypeFactory);\n\n  wTypeFactory.$inject = ['$resource', 'ApiSettings'];\n\n  function wTypeFactory($resource, ApiSettings) {\n    return $resource(ApiSettings.url + 'weather_types');\n  }\n})();\n","(function() {\n  'use strict';\n\n  function DialogController() {\n    this.close = function() {\n      console.log('close');\n      this.forecast = undefined;\n    };\n  }\n\n  angular\n    .module('bDay')\n    .component('fDialog', {\n      controller: DialogController,\n      bindings: {\n        forecast: '=',\n        action: '=',\n        weatherTypes: '=',\n        cities: '=',\n        dates: '='\n      },\n      template: ['$element', '$timeout', function($element, $timeout) {\n        $timeout(function() {\n          var dialog = $element.find('dialog')[0];\n          if (!dialog.showModal) {\n            dialogPolyfill.registerDialog(dialog);\n          }\n        }, 1000);\n\n        return '<dialog class=\"mdl-dialog\" ng-attr-open=\"{{ $ctrl.forecast }}\"><form ng-submit=\"$ctrl.action[\\'submit\\']($event); $ctrl.close();\"><h4 class=\"mdl-dialog__title\">{{ $ctrl.action[\\'name\\'] }} <span ng-if=\"$ctrl.action[\\'type\\'] === \\'edit\\'\">({{ $ctrl.forecast.date }})</span></h4><div class=\"mdl-dialog__content\">' +\n          '<div class=\"mdl-dropdown\" ng-show=\"$ctrl.action[\\'type\\'] === \\'add\\'\"><h6 ng-bind=\"$ctrl.forecast.date || \\'Выберите дату\\'\"></h6><input class=\"modal-hidden-input\" type=\"text\" ng-model=\"$ctrl.forecast.date\" required><div class=\"mdl-layout-spacer\"></div><a id=\"datebtn\" class=\"mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon\"><i class=\"material-icons\" role=\"presentation\">arrow_drop_down</i><span class=\"visuallyhidden\">Dates</span></a><ul class=\"mdl-menu mdl-menu--bottom-right mdl-js-menu mdl-js-ripple-effect\" for=\"datebtn\"><li class=\"mdl-menu__item\" ng-repeat=\"date in $ctrl.dates\" ng-if=\"date != $ctrl.forecast.date\" ng-click=\"$ctrl.action[\\'setDate\\'](date)\">{{ date }}</li></ul></div>' +\n          '<div class=\"mdl-dropdown\"><h6 ng-bind=\"$ctrl.forecast.city.name\"></h6><div class=\"mdl-layout-spacer\"></div><a id=\"citybtn\" class=\"mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon\"><i class=\"material-icons\" role=\"presentation\">arrow_drop_down</i><span class=\"visuallyhidden\">Cities</span></a><ul class=\"mdl-menu mdl-menu--bottom-right mdl-js-menu mdl-js-ripple-effect\" for=\"citybtn\"><li class=\"mdl-menu__item\" ng-repeat=\"loop_city in $ctrl.cities\" ng-if=\"loop_city.id != $ctrl.forecast.city_id\" ng-click=\"$ctrl.action[\\'setCity\\'](loop_city)\">{{ loop_city.name }}</li></ul></div>' +\n          '<div class=\"mdl-dropdown\"><h6 ng-bind=\"$ctrl.forecast.type || \\'Выберите тип погоды\\'\"></h6><input class=\"modal-hidden-input\" type=\"text\" ng-model=\"$ctrl.forecast.type\" required><div class=\"mdl-layout-spacer\"></div><a id=\"typebtn\" class=\"mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--icon\"><i class=\"material-icons\" role=\"presentation\">arrow_drop_down</i><span class=\"visuallyhidden\">Weather Types</span></a><ul class=\"mdl-menu mdl-menu--bottom-right mdl-js-menu mdl-js-ripple-effect\" for=\"typebtn\"><li class=\"mdl-menu__item\" ng-repeat=\"(key, value) in $ctrl.weatherTypes\" ng-if=\"key != $ctrl.forecast.weather_type\" ng-click=\"$ctrl.action[\\'setType\\'](key, value)\">{{ value }}</li></ul></div>' +\n          '<div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" ng-class=\"{\\'is-dirty\\': $ctrl.forecast.t_day !== undefined}\"><input class=\"mdl-textfield__input\" type=\"text\" pattern=\"-?[0-9]*(\\.[0-9]+)?\" id=\"d_temp\" ng-model=\"$ctrl.forecast.t_day\" value=\"0\" ng-required=\"$ctrl.forecast\"><label class=\"mdl-textfield__label\" for=\"d_temp\">Day temperature</label><span class=\"mdl-textfield__error\">Input is not a number!</span></div><div class=\"mdl-textfield mdl-js-textfield mdl-textfield--floating-label\" ng-class=\"{\\'is-dirty\\': $ctrl.forecast.t_night !== undefined}\"><input class=\"mdl-textfield__input\" type=\"text\" pattern=\"-?[0-9]*(\\.[0-9]+)?\" id=\"n_temp\" ng-model=\"$ctrl.forecast.t_night\" ng-required=\"$ctrl.forecast\"><label class=\"mdl-textfield__label\" for=\"n_temp\">Night temperature</label><span class=\"mdl-textfield__error\">Input is not a number!</span></div></div><div class=\"mdl-dialog__actions\"><button type=\"submit\" class=\"mdl-button\">Apply</button><a type=\"button\" class=\"mdl-button close\" ng-click=\"$ctrl.close()\">Cancel</button></div></form></dialog>';\n      }]\n    });\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('bDay')\n    .controller('ForecastController', ForecastController);\n\n  ForecastController.$inject = ['$scope', '$filter', '$timeout', 'City', 'WeatherType', 'Forecast'];\n\n  function ForecastController($scope, $filter, $timeout, City, WeatherType, Forecast) {\n    $scope.isLoading = true;\n    $scope.city = undefined;\n    $scope.cities = [];\n    $scope.weatherTypes = {};\n    $scope.forecast = [];\n    $scope.selectedForecast = undefined;\n    $scope.today = $filter('date')(new Date(), 'dd.MM.yyyy');\n    $scope.modalAction = {};\n\n    // GET Cities\n    City.get(function (resp) {\n      $scope.cities = resp.d.results;\n      $scope.city = $scope.cities[0];\n    });\n\n    // GET Weather Types\n    WeatherType.get(function(resp) {\n      var res = resp.d.results;\n      res.forEach(function(type) {\n        $scope.weatherTypes[type.code] = type.name;\n      });\n\n      // GET Forecast\n      Forecast.get(function(resp) {\n        $scope.forecast = resp.d.results;\n        $scope.forecast.forEach(function(entry) {\n          entry.day = getDay(entry.date);\n          entry.isNow = entry.date === $scope.today ? true : undefined;\n          entry.type = $scope.weatherTypes[entry.weather_type];\n        });\n        sortForecast();\n        $scope.forecast = $scope.forecast.filter(function(fcast) {\n          return fcast.date && fcast.weather_type;\n        });\n      });\n    });\n\n    // Change filter - City\n    $scope.setCity = function(city) {\n      $scope.city = city;\n    };\n\n    // DELETE Forecast (and remove f-cast element from array)\n    $scope.deleteForecast = function(fcast) {\n      Forecast.remove({id: fcast.id}, function() {\n        $scope.forecast.splice($scope.forecast.indexOf(fcast), 1);\n      });\n    };\n\n    // Open modal window\n    $scope.openModal = function(fcast) {\n      // if fcast exist (mean it's \"edit\" event)\n      if (fcast) {\n        // Set current city\n        setCity($scope.city);\n        // Fill actions\n        fillModalAction('edit', function(e) {\n          e.preventDefault();\n          Forecast.update({id: fcast.id}, fcast);\n        });\n      } else {\n        // Create new empty \"fcast\" object\n        fcast = {};\n        // Fill city\n        setCity($scope.city);\n        // Fill actions\n        fillModalAction('add', function() {\n          var newFCast = new Forecast();\n          copyObject(fcast, newFCast);\n          newFCast.$save();\n          $scope.forecast.push(fcast);\n          sortForecast();\n        });\n      }\n\n      // Select a city\n      $scope.modalAction['setCity'] = function(city) {\n        setCity(city);\n        rebuildDates(fcast.city);\n        if (fcast.date) {\n          setDate($scope.dates[0]);\n        }\n      };\n\n      // Select a weather type\n      $scope.modalAction['setType'] = function(code, value) {\n        fcast.weather_type = code;\n        fcast.type = value;\n      };\n\n      // Select a date\n      $scope.modalAction['setDate'] = setDate;\n\n      // Predefined filling of dates array\n      rebuildDates(fcast.city);\n\n      // Current \"fcast\" object\n      $scope.selectedForecast = fcast;\n\n      // Supporting functions\n      function setCity(city) {\n        fcast.city = city;\n        fcast.city_id = city.id;\n      }\n      function setDate(date) {\n        fcast.date = date;\n        fcast.day = getDay(date);\n      }\n    };\n\n    $timeout(function() {\n      // Loader's manager\n      $scope.isLoading = false;\n    }, 1000);\n\n    // Supporting functions\n    function copyObject(from, to) {\n      Object.keys(from).forEach(function(key) {\n        to[key] = from[key];\n      });\n    }\n\n    function fillModalAction(type, callback) {\n      $scope.modalAction['type'] = type;\n      $scope.modalAction['name'] = type === 'edit' ? 'Edit' : 'Add';\n      $scope.modalAction['submit'] = callback;\n    }\n\n    $scope.dates = [];\n    function findedDate(day, fcasts) {\n      return fcasts.find(function(el) {\n        return parseInt(el.day, 10) === day;\n      });\n    }\n\n    function rebuildDates(city) {\n      $scope.dates = [];\n      var fcasts = $scope.forecast.filter(function(fcast) {\n        return (parseInt(fcast.city_id, 10) === parseInt(city.id, 10)) && fcast.day;\n      });\n      if (fcasts.length) {\n        for (var i = parseInt(fcasts[0].day, 10); i <= 31; i++) {\n          if (!findedDate(i, fcasts)) {\n            $scope.dates.push((i < 10 ? '0' + i : String(i)) + '.10.2016');\n          }\n        }\n      }\n    }\n\n    function sortForecast() {\n      $scope.forecast.sort(function (a, b) {\n        if (!a.date) {\n          return -1;\n        }\n        if (!b.date) {\n          return 1;\n        }\n        var date1 = Date.parse(a.date.replace(/(\\d{2})\\.(\\d{2})\\.(\\d{4})/, '$2/$1/$3'));\n        var date2 = Date.parse(b.date.replace(/(\\d{2})\\.(\\d{2})\\.(\\d{4})/, '$2/$1/$3'));\n\n        if (date1 > date2) {\n          return 1;\n        }\n        if (date1 < date2) {\n          return -1;\n        }\n        return 0;\n      });\n    }\n\n    function getDay(date) {\n      return date ? date.split('.')[0] : '';\n    }\n  }\n})();\n"],"sourceRoot":"/source/"}